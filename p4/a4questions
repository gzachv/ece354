Name (and partner's name): Gustavo Zach Vargas
Section (and partner's section): Section 1

Assignment 4 questions.
Do not remove the questions from this file.
Please indent your answers.

For ALL cache simulations, use a capacity of 16384 bytes for both 
the I-cache and the D-cache.

cache1D
-------

Describe how you tested your code to verify that it works.
	Since it is known that the sum of all consecutive numbers in a series is equal to (N*(N+1))/2, one can predict the 
	sum of all the numbers in the array. If this sum holds true for the formula, it can be varified that each element in
	the array does indeed contain its index as a value. Unfortunatly, when N = 99999 (100000 - 1 since indexing begins at 0),
	the sum is too large to hold in an integer. For this reason, I split the sum into four equal parts:
		sum from elements 0 - 24999
		sum from elements 25000 - 49999
		sum form elements 50000 - 74999
		sum from elements 75000 - 99999
	Then I can see that the sum of these four subtotals is equal to (99999*100000)/2. Thus it was varified that the code was
	filling the array of 100000 elements with the corresponding index value at each element.

What do you get from running pin with a block size of 4 bytes?
	The output from pin with block size of 4 bytes is as follows:
		Instruction cache misses:	5927
		Instruction cache references:	695693
		Data cache misses:		107116
		Data cache references:		646567	

What is the hit ratio for the I-cache with a block size of 4 bytes?
	hit ratio (HR) = 1 - (miss ratio)  = 1 - (# miss)/(# references)

	HR = 1 - (5927)/(695693) = 0.99148

What is the hit ratio for the D-cache with a block size of 4 bytes?
	HR = 1 - (107116)/(646567) = 0.834331

What do you get from running pin with a block size of 32 bytes?
		Instruction cache misses:	1175
		Instruction cache references:	695693
		Data cache misses:		14989
		Data cache references:		646567

What is the hit ratio for the I-cache with a block size of 32 bytes?
	HR = 1 - (1175)/(695693) = 0.998311 

What is the hit ratio for the D-cache with a block size of 32 bytes?
	HR = 1 - (14989/646567) = 0.976818

What do you get from running pin with a block size of 64 bytes?
		Instruction cache misses:	704
		Instruction cache references:	695693
		Data cache misses:		8432
		Data cache references:		646567

What is the hit ratio for the I-cache with a block size of 64 bytes?
	HR = 1 - (704)/(695693) = 0.998988

What is the hit ratio for the D-cache with a block size of 64 bytes?
	HR = 1 - (8432)/646567 = 0.986959

Which block size is best for the I-cache?  Why?
	A block size of 64 bytes is the best for the I-cache because a larger cache is more likely to contain a given block.
	A larger block size means a cache can hold more data in each block at once, thus once an instruction is placed in the cache it can remain in the cache longer. 
	This takes advantage of the temporal locality of instructions (once an instruction is called it is likely to be called again - ex: loops).
	The more relavent effect is spacial locality. With larger block sizes, more instructions next to eachother can be stored in one block.
	For the most part, instructions are sequential. If a block holds more instructions following the current accessed instruction, it is more likely that the next
	instruction will be found in the cache (spacial locality).

Which block size is best for the D-cache?  Why? In what way does the block 
  size affect the hit ratio for this program?
  	A block size of 64 bytes is the best for the D-cache. The rationale as to why is the same as above: the larger the block size,
	the more a cache can take advantage of temporal and spacial locality. For this reason, the higher the block size, the better the hit ratio.
	The more data in each block, the better chance another access request will be found in the cache because there is more data availble in the cache.

cache2Drows
-----------

What do you get from running pin with a block size of 64 bytes?
		Instruction cache misses:	706
		Instruction cache references:	16616714
		Data cache misses:		106725
		Data cache references:		12061571

What is the hit ratio for the I-cache with a block size of 64 bytes?
	HR = 1 - (706)/(16616714) = 0.999958

What is the hit ratio for the D-cache with a block size of 64 bytes?
	HR = 1 - (106725)/(12061571) = 0.991152

cache2Dcols
-----------

What do you get from running pin with a block size of 64 bytes?
		Instruction cache misses:	706
		Instruction cache references:	16599214
		Data cache misses:		1507496
		Data cache references:		12049071

What is the hit ratio for the I-cache with a block size of 64 bytes?
	HR = 1 - (706)/(1659914) = 0.999957

What is the hit ratio for the D-cache with a block size of 64 bytes?
	HR = 1 - (1507496)/(12049071) = 0.874887 

Comparison of cache2Drows and cache2Dcols
-----------------------------------------

Compare the performance (hit ratios) of the I-cache for these 2 programs.
Justify your statistics.
	The two I-cache hit ratios are nearly identical. This is not a suprise as the only thing changed is the order of the nested for loops. 
	In cache2Drows the outer for loop iterates through rows while the outer for loop is cache2Dcols iterates through columns.
	All other instructions are the same and thus the cache performace should be the same as the same instructions are accessed in almost the same order.
	The locality of these instructions is bearly changed by the reordering of for loops and thus the hit ratio is also hardly changed.

Compare the performance (hit ratios) of the D-cache for these 2 programs.
Explain any differences.
	The hit ratio for passing through rows is considerable higher than that of iterating through columns. This is due to the way that 2D arrays
	are stored by the C programming language. The high level language C stores 2D arrays in a row major storage order. This means that each row is
	stored in sequence from the first element in a row to the last then the next row in a similar manner. For example:
			|	|
			|  0,0  |
			|  0,1  |
			|  0,2  |
			|  0,3  |
			|  1,0  |
			|  1,1  |
			|  1,2  |
			|  1,3  |
	This example shows a 2x4 array stored in the stack. As seen above row major storage order keeps rows together in memory. This storage order much favors
	searching through an arrays rows like done in cache2Drows because the rows exhibit a high degree of spacial locality as the elements are located
	one after another. Thus iterating through the rows places blocks into the cache that are more likely to be close to the next element search (if going
	sequentially). If iterating through rows, using the example above, (0,0) is much farther away from (1,0) and thus less likely to be in the cache.
	In summary, iterating through rows takes advantage of the storage order of 2D arrays in C that exhibits high spacial locality between rows. 

